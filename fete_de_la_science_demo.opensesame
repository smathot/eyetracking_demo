# Generated by OpenSesame 2.9.5 (Hesitant Heisenberg)
# Mon Apr 20 15:47:09 2015 (posix)
# <http://www.cogsci.nl/opensesame>

set background "black"
set bidi "no"
set canvas_backend "psycho"
set compensation "0"
set coordinates "relative"
set description "A template containing a practice and an experimental phase"
set font_bold "no"
set font_family "mono"
set font_italic "no"
set font_size "18"
set foreground "white"
set height "768"
set keyboard_backend "psycho"
set mouse_backend "psycho"
set sampler_backend "legacy"
set start "experiment"
set subject_nr "0"
set subject_parity "even"
set synth_backend "legacy"
set title "Extended template"
set transparent_variables "no"
set width "1024"

define inline_script choose_img
	___prepare__
	folder = os.path.join(exp.experiment_path, u'images')
	images = os.listdir(folder)
	img_path = os.path.join(folder, random.choice(images))
	__end__
	set _run ""

define sequence experiment
	set description "The main sequence of the experiment"
	set flush_keyboard "yes"
	run init "always"
	run form_multiple_choice "always"
	run pygaze_init "always"
	run painting_script "[demo] = Dessiner"
	run scotoma_loop "[demo] = Scotome"
	run window_loop "[demo] = FenU+00EAtre"

define form_multiple_choice form_multiple_choice
	set advance_immediately "yes"
	set allow_multiple "no"
	set button_text "Ok"
	set form_title "Demo"
	set form_var "demo"
	__options__
	Scotome
	FenU+00EAtre
	Dessiner
	__end__
	set question "Choissisez votre dU+00E9monstration "

define inline_script init
	set _prepare ""
	___run__
	from psychopy import visual, event
	import os
	import random
	import numpy as np
	xc = self.get('width')/2
	yc = self.get('height')/2
	__end__

define inline_script painting_script
	set _prepare ""
	___run__
	vertices = []
	
	r = 0
	g = 0
	b = 0
	f = .1
	
	while True:
		l = event.getKeys()
		if 'space' in l:
			vertices = []
		if 'escape' in l:
			raise Exception('Demo aborted')	
		x, y = exp.pygaze_eyetracker.sample()
		x = x-xc
		y = yc-y	
		if len(vertices) > 0:
			d = np.sqrt((vertices[-1][0]-x)**2 + (vertices[-1][1]-y)**2)
			if d < 10:
				continue
		r += np.random.random()*f - .5*f
		r = min(1, max(-1, r))
		g += np.random.random()*f - .5*f
		g = min(1, max(-1, g))
		b += np.random.random()*f - .5*f
		b = min(1, max(-1, b))				
		vertices.append( [x, y] )
		visual.ShapeStim(win, lineWidth=8, lineColor=(r, g, b),
			vertices=vertices, closeShape=False).draw()
		win.flip()
	__end__

define pygaze_init pygaze_init
	set _logfile "automatic"
	set calibrate "yes"
	set sacc_acc_thr "9500"
	set sacc_vel_thr "35"
	set tracker_type "Advanced dummy (mouse simulation)"

define pygaze_start_recording pygaze_start_recording
	set status_msg "start_trial"

define pygaze_stop_recording pygaze_stop_recording
	set status_msg "stop_trial"

define loop scotoma_loop
	set break_if "never"
	set column_order ""
	set cycles "1"
	set item "scotoma_sequence"
	set order "random"
	set repeat "100"
	run scotoma_sequence

define inline_script scotoma_script
	set _prepare ""
	___run__
	img = visual.ImageStim(win, img_path)
	sct = visual.GratingStim(win, size=256, tex=None, mask='raisedCos', color=0)
	while True:
		l = event.getKeys()
		if 'space' in l:
			break
		if 'escape' in l:
			raise Exception('Demo aborted')
		x, y = exp.pygaze_eyetracker.sample()	
		x -= xc
		y = -(y-yc)
		sct.pos = x, y
		img.draw()	
		sct.draw()
		win.flip()
	__end__

define sequence scotoma_sequence
	set flush_keyboard "yes"
	run pygaze_start_recording "always"
	run choose_img "always"
	run scotoma_script "always"
	run pygaze_stop_recording "always"

define loop window_loop
	set break_if "never"
	set column_order ""
	set cycles "1"
	set description "A loop containing one or more practice blocks"
	set item "window_sequence"
	set order "random"
	set repeat "100"
	run window_sequence

define inline_script window_script
	set _prepare ""
	___run__
	img = visual.ImageStim(win, img_path)
	apt = visual.Aperture(win, size=128)
	while True:
		l = event.getKeys()
		if 'space' in l:
			break
		if 'escape' in l:
			raise Exception('Demo aborted')
		x, y = exp.pygaze_eyetracker.sample()	
		x -= xc
		y = -(y-yc)
		apt.setPos( (x, y) )
		img.draw()	
		win.flip()
	__end__

define sequence window_sequence
	set description "A sequence containing a single block of trials followed by feedback to the participant"
	set flush_keyboard "yes"
	run pygaze_start_recording "always"
	run choose_img "always"
	run window_script "always"
	run pygaze_stop_recording "always"

